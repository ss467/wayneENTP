// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h2XDq26pimVCBS81hUZxQM
// Component: 1cikFjgCWURD

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: fGhF70IXmgCS/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { RichList } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-list";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: h2XDq26pimVCBS81hUZxQM/projectcss
import sty from "./PlasmicProducts.module.css"; // plasmic-import: 1cikFjgCWURD/css

createPlasmicElementProxy;

export type PlasmicProducts__VariantMembers = {};
export type PlasmicProducts__VariantsArgs = {};
type VariantPropType = keyof PlasmicProducts__VariantsArgs;
export const PlasmicProducts__VariantProps = new Array<VariantPropType>();

export type PlasmicProducts__ArgsType = {};
type ArgPropType = keyof PlasmicProducts__ArgsType;
export const PlasmicProducts__ArgProps = new Array<ArgPropType>();

export type PlasmicProducts__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  addProduct?: Flex__<typeof AntdModal>;
  addProductForm?: Flex__<typeof FormWrapper>;
  dataList?: Flex__<typeof RichList>;
  editProduct?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
};

export interface DefaultProductsProps {
  className?: string;
}

const $$ = {};

function PlasmicProducts__RenderFunc(props: {
  variants: PlasmicProducts__VariantsArgs;
  args: PlasmicProducts__ArgsType;
  overrides: PlasmicProducts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedProductId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editProduct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "addProduct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "addProductForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "addProductForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "addProductForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "addProductForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getInventoryData: usePlasmicDataOp(() => {
      return {
        sourceId: "7eXsxnK3zMamfbWof84SZr",
        opId: "e394866d-f8a9-4745-8a7b-afb4849a1779",
        userArgs: {},
        cacheKey: `plasmic.$.e394866d-f8a9-4745-8a7b-afb4849a1779.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Products"}
                  </h1>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pCaf)}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__t7AdJ
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateAddProductOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["addProduct", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAddProductOpen"] != null &&
                          typeof $steps["updateAddProductOpen"] === "object" &&
                          typeof $steps["updateAddProductOpen"].then ===
                            "function"
                        ) {
                          $steps["updateAddProductOpen"] = await $steps[
                            "updateAddProductOpen"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nBje
                        )}
                      >
                        {"Add a product"}
                      </div>
                    </AntdButton>
                    <AntdModal
                      data-plasmic-name={"addProduct"}
                      data-plasmic-override={overrides.addProduct}
                      className={classNames("__wab_instance", sty.addProduct)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      footer={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fdwvA
                          )}
                        >
                          {""}
                        </div>
                      }
                      modalScopeClassName={sty["addProduct__modal"]}
                      onOpenChange={generateStateOnChangeProp($state, [
                        "addProduct",
                        "open"
                      ])}
                      open={generateStateValueProp($state, [
                        "addProduct",
                        "open"
                      ])}
                      title={"Add a product"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gH2X0
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.addProductForm
                            ),
                            data: {
                              sourceId: "7eXsxnK3zMamfbWof84SZr",
                              opId: "28efc766-90ac-412f-9bc0-d7d2ebdb2bf2",
                              userArgs: {},
                              cacheKey: `plasmic.$.${(() => {
                                try {
                                  return "getSchema";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}.$.IMCPRrM62Jdo.$.28efc766-90ac-412f-9bc0-d7d2ebdb2bf2.$.`,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            dataFormItems: (() => {
                              const __composite = [
                                {
                                  key: "product_id",
                                  fieldId: "product_id",
                                  hidden: null
                                },
                                { key: "brand", fieldId: "brand", label: null },
                                { key: "name", fieldId: "name", label: null },
                                {
                                  key: "description",
                                  fieldId: "description",
                                  label: null
                                },
                                { key: "price", fieldId: "price", label: null },
                                {
                                  key: "stock_quantity",
                                  fieldId: "stock_quantity",
                                  label: null
                                },
                                {
                                  key: "is_active",
                                  fieldId: "is_active",
                                  hidden: null
                                },
                                {
                                  key: "created_at",
                                  fieldId: "created_at",
                                  hidden: null
                                },
                                {
                                  key: "updated_at",
                                  fieldId: "updated_at",
                                  hidden: null
                                },
                                {
                                  key: "category_id",
                                  fieldId: "category_id",
                                  label: null,
                                  hidden: null
                                },
                                {
                                  key: "low_stock_threshold",
                                  fieldId: "low_stock_threshold",
                                  label: null
                                },
                                { key: "sku", fieldId: "sku", label: null },
                                {
                                  key: "image_url",
                                  fieldId: "image_url",
                                  label: null
                                }
                              ];
                              __composite["0"]["hidden"] = true;
                              __composite["1"]["label"] = "Brand";
                              __composite["2"]["label"] = "Product name";
                              __composite["3"]["label"] = "Description";
                              __composite["4"]["label"] = "Price";
                              __composite["5"]["label"] = "Stock quantity";
                              __composite["6"]["hidden"] = true;
                              __composite["7"]["hidden"] = true;
                              __composite["8"]["hidden"] = true;
                              __composite["9"]["label"] = "Category ID";
                              __composite["9"]["hidden"] = true;
                              __composite["10"]["label"] =
                                "Low stock threshold";
                              __composite["11"]["label"] = "SKU";
                              __composite["12"]["label"] = "Image URL";
                              return __composite;
                            })(),

                            extendedOnValuesChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["addProductForm", "value"],
                                FormWrapper_Helpers
                              ),
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "simplified",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["defaultSubmit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "7eXsxnK3zMamfbWof84SZr",
                                        opId: "ca7855f2-f866-433e-b6c2-f11d142e4de5",
                                        userArgs: {
                                          variables: [
                                            $state.addProductForm.value
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["defaultSubmit"] != null &&
                                typeof $steps["defaultSubmit"] === "object" &&
                                typeof $steps["defaultSubmit"].then ===
                                  "function"
                              ) {
                                $steps["defaultSubmit"] = await $steps[
                                  "defaultSubmit"
                                ];
                              }
                            },
                            onIsSubmittingChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["addProductForm", "isSubmitting"],
                                FormWrapper_Helpers
                              ),
                            ref: ref => {
                              $refs["addProductForm"] = ref;
                            },
                            submitSlot: (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__yO7Nu
                                )}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iT9FU
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </AntdButton>
                            ),
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "addProductForm.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "addProductForm.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"addProductForm"}
                              data-plasmic-override={overrides.addProductForm}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </AntdModal>
                  </Stack__>
                  <RichList
                    data-plasmic-name={"dataList"}
                    data-plasmic-override={overrides.dataList}
                    bordered={true}
                    className={classNames("__wab_instance", sty.dataList)}
                    content={[
                      {
                        key: "description",
                        fieldId: "description",
                        role: "content"
                      }
                    ]}
                    data={(() => {
                      try {
                        return $queries.getInventoryData;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    image={(() => {
                      const __composite = { fieldId: null };
                      __composite["fieldId"] = "image_url";
                      return __composite;
                    })()}
                    pageSize={12}
                    rowActions={(() => {
                      const __composite = [
                        { type: "item", label: null, onClick: null },
                        { type: "item", label: null, onClick: null }
                      ];
                      __composite["0"]["label"] = "Edit";
                      __composite["0"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["updateEditProductOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editProduct", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditProductOpen"] != null &&
                          typeof $steps["updateEditProductOpen"] === "object" &&
                          typeof $steps["updateEditProductOpen"].then ===
                            "function"
                        ) {
                          $steps["updateEditProductOpen"] = await $steps[
                            "updateEditProductOpen"
                          ];
                        }

                        $steps["updateSelectedProductId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedProductId"]
                                },
                                operation: 0,
                                value: rowKey
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectedProductId"] != null &&
                          typeof $steps["updateSelectedProductId"] ===
                            "object" &&
                          typeof $steps["updateSelectedProductId"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedProductId"] = await $steps[
                            "updateSelectedProductId"
                          ];
                        }
                      };
                      __composite["1"]["label"] = "Delete";
                      __composite["1"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["postgresDeleteMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "7eXsxnK3zMamfbWof84SZr",
                                  opId: "b82b77ea-7ebb-45a3-9a8c-55de8b10a6fe",
                                  userArgs: {
                                    conditions: [rowKey]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresDeleteMany"] != null &&
                          typeof $steps["postgresDeleteMany"] === "object" &&
                          typeof $steps["postgresDeleteMany"].then ===
                            "function"
                        ) {
                          $steps["postgresDeleteMany"] = await $steps[
                            "postgresDeleteMany"
                          ];
                        }
                      };
                      return __composite;
                    })()}
                    type={"grid"}
                  />

                  <AntdModal
                    data-plasmic-name={"editProduct"}
                    data-plasmic-override={overrides.editProduct}
                    className={classNames("__wab_instance", sty.editProduct)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Z1Pp
                        )}
                      >
                        {"\\"}
                      </div>
                    }
                    modalScopeClassName={sty["editProduct__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "editProduct",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "editProduct",
                      "open"
                    ])}
                    title={"Edit product"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ibAaL)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          data: {
                            sourceId: "7eXsxnK3zMamfbWof84SZr",
                            opId: "1e1cc5f5-1eae-451a-9ed8-06210398e96e",
                            userArgs: {
                              filters: [$state.selectedProductId]
                            },
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getOne";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.lH0-tSyHKmMk.$.1e1cc5f5-1eae-451a-9ed8-06210398e96e.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              { key: "brand", fieldId: "brand", label: null },
                              { key: "name", fieldId: "name", label: null },
                              {
                                key: "description",
                                fieldId: "description",
                                label: null
                              },
                              { key: "price", fieldId: "price", label: null },
                              {
                                key: "product_id",
                                fieldId: "product_id",
                                hidden: null
                              },
                              {
                                key: "stock_quantity",
                                fieldId: "stock_quantity",
                                label: null
                              },
                              {
                                key: "is_active",
                                fieldId: "is_active",
                                hidden: null
                              },
                              {
                                key: "created_at",
                                fieldId: "created_at",
                                hidden: null
                              },
                              {
                                key: "updated_at",
                                fieldId: "updated_at",
                                hidden: null
                              },
                              {
                                key: "category_id",
                                fieldId: "category_id",
                                hidden: null
                              },
                              {
                                key: "low_stock_threshold",
                                fieldId: "low_stock_threshold",
                                label: null
                              },
                              {
                                key: "image_url",
                                fieldId: "image_url",
                                label: null
                              },
                              { key: "sku", fieldId: "sku", label: null }
                            ];
                            __composite["0"]["label"] = "Manufacturer";
                            __composite["1"]["label"] = "Product name";
                            __composite["2"]["label"] = "Description";
                            __composite["3"]["label"] = "Price";
                            __composite["4"]["hidden"] = true;
                            __composite["5"]["label"] = "Stock quantity";
                            __composite["6"]["hidden"] = true;
                            __composite["7"]["hidden"] = true;
                            __composite["8"]["hidden"] = true;
                            __composite["9"]["hidden"] = true;
                            __composite["10"]["label"] = "Low stock threshold";
                            __composite["11"]["label"] = "Image URL";
                            __composite["12"]["label"] = "SKU";
                            return __composite;
                          })(),

                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "7eXsxnK3zMamfbWof84SZr",
                                      opId: "a0bcbd63-3a2b-4e94-9ee9-83066ba9a7bd",
                                      userArgs: {
                                        conditions: [$state.selectedProductId],
                                        variables: [$state.form.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___4Bvr9
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__u2FIi
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </AntdModal>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "addProduct",
    "addProductForm",
    "dataList",
    "editProduct",
    "form"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "addProduct",
    "addProductForm",
    "dataList",
    "editProduct",
    "form"
  ],
  section: [
    "section",
    "h1",
    "addProduct",
    "addProductForm",
    "dataList",
    "editProduct",
    "form"
  ],
  h1: ["h1"],
  addProduct: ["addProduct", "addProductForm"],
  addProductForm: ["addProductForm"],
  dataList: ["dataList"],
  editProduct: ["editProduct", "form"],
  form: ["form"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  addProduct: typeof AntdModal;
  addProductForm: typeof FormWrapper;
  dataList: typeof RichList;
  editProduct: typeof AntdModal;
  form: typeof FormWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProducts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProducts__VariantsArgs;
    args?: PlasmicProducts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProducts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProducts__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProducts__ArgProps,
          internalVariantPropNames: PlasmicProducts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProducts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProducts";
  } else {
    func.displayName = `PlasmicProducts.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "h2XDq26pimVCBS81hUZxQM"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicProducts = Object.assign(
  // Top-level PlasmicProducts renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    addProduct: makeNodeComponent("addProduct"),
    addProductForm: makeNodeComponent("addProductForm"),
    dataList: makeNodeComponent("dataList"),
    editProduct: makeNodeComponent("editProduct"),
    form: makeNodeComponent("form"),

    // Metadata about props expected for PlasmicProducts
    internalVariantProps: PlasmicProducts__VariantProps,
    internalArgProps: PlasmicProducts__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProducts;
/* prettier-ignore-end */
